"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateThingShadowResponseFilterSensitiveLog = exports.UpdateThingShadowRequestFilterSensitiveLog = exports.PublishRequestFilterSensitiveLog = exports.ListRetainedMessagesResponseFilterSensitiveLog = exports.RetainedMessageSummaryFilterSensitiveLog = exports.ListRetainedMessagesRequestFilterSensitiveLog = exports.ListNamedShadowsForThingResponseFilterSensitiveLog = exports.ListNamedShadowsForThingRequestFilterSensitiveLog = exports.GetThingShadowResponseFilterSensitiveLog = exports.GetThingShadowRequestFilterSensitiveLog = exports.GetRetainedMessageResponseFilterSensitiveLog = exports.GetRetainedMessageRequestFilterSensitiveLog = exports.DeleteThingShadowResponseFilterSensitiveLog = exports.DeleteThingShadowRequestFilterSensitiveLog = exports.RequestEntityTooLargeException = exports.UnsupportedDocumentEncodingException = exports.UnauthorizedException = exports.ThrottlingException = exports.ServiceUnavailableException = exports.ResourceNotFoundException = exports.MethodNotAllowedException = exports.InvalidRequestException = exports.InternalFailureException = exports.ConflictException = void 0;
const IoTDataPlaneServiceException_1 = require("./IoTDataPlaneServiceException");
class ConflictException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
    }
}
exports.ConflictException = ConflictException;
class InternalFailureException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "InternalFailureException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalFailureException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalFailureException.prototype);
    }
}
exports.InternalFailureException = InternalFailureException;
class InvalidRequestException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "InvalidRequestException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
    }
}
exports.InvalidRequestException = InvalidRequestException;
class MethodNotAllowedException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "MethodNotAllowedException",
            $fault: "client",
            ...opts,
        });
        this.name = "MethodNotAllowedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MethodNotAllowedException.prototype);
    }
}
exports.MethodNotAllowedException = MethodNotAllowedException;
class ResourceNotFoundException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class ServiceUnavailableException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "ServiceUnavailableException",
            $fault: "server",
            ...opts,
        });
        this.name = "ServiceUnavailableException";
        this.$fault = "server";
        Object.setPrototypeOf(this, ServiceUnavailableException.prototype);
    }
}
exports.ServiceUnavailableException = ServiceUnavailableException;
class ThrottlingException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
    }
}
exports.ThrottlingException = ThrottlingException;
class UnauthorizedException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
exports.UnauthorizedException = UnauthorizedException;
class UnsupportedDocumentEncodingException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "UnsupportedDocumentEncodingException",
            $fault: "client",
            ...opts,
        });
        this.name = "UnsupportedDocumentEncodingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedDocumentEncodingException.prototype);
    }
}
exports.UnsupportedDocumentEncodingException = UnsupportedDocumentEncodingException;
class RequestEntityTooLargeException extends IoTDataPlaneServiceException_1.IoTDataPlaneServiceException {
    constructor(opts) {
        super({
            name: "RequestEntityTooLargeException",
            $fault: "client",
            ...opts,
        });
        this.name = "RequestEntityTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestEntityTooLargeException.prototype);
    }
}
exports.RequestEntityTooLargeException = RequestEntityTooLargeException;
const DeleteThingShadowRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteThingShadowRequestFilterSensitiveLog = DeleteThingShadowRequestFilterSensitiveLog;
const DeleteThingShadowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteThingShadowResponseFilterSensitiveLog = DeleteThingShadowResponseFilterSensitiveLog;
const GetRetainedMessageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetRetainedMessageRequestFilterSensitiveLog = GetRetainedMessageRequestFilterSensitiveLog;
const GetRetainedMessageResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetRetainedMessageResponseFilterSensitiveLog = GetRetainedMessageResponseFilterSensitiveLog;
const GetThingShadowRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetThingShadowRequestFilterSensitiveLog = GetThingShadowRequestFilterSensitiveLog;
const GetThingShadowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetThingShadowResponseFilterSensitiveLog = GetThingShadowResponseFilterSensitiveLog;
const ListNamedShadowsForThingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListNamedShadowsForThingRequestFilterSensitiveLog = ListNamedShadowsForThingRequestFilterSensitiveLog;
const ListNamedShadowsForThingResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListNamedShadowsForThingResponseFilterSensitiveLog = ListNamedShadowsForThingResponseFilterSensitiveLog;
const ListRetainedMessagesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListRetainedMessagesRequestFilterSensitiveLog = ListRetainedMessagesRequestFilterSensitiveLog;
const RetainedMessageSummaryFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RetainedMessageSummaryFilterSensitiveLog = RetainedMessageSummaryFilterSensitiveLog;
const ListRetainedMessagesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListRetainedMessagesResponseFilterSensitiveLog = ListRetainedMessagesResponseFilterSensitiveLog;
const PublishRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.PublishRequestFilterSensitiveLog = PublishRequestFilterSensitiveLog;
const UpdateThingShadowRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateThingShadowRequestFilterSensitiveLog = UpdateThingShadowRequestFilterSensitiveLog;
const UpdateThingShadowResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateThingShadowResponseFilterSensitiveLog = UpdateThingShadowResponseFilterSensitiveLog;
